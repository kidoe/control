package synth;



/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.SquareOscillator;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.unitgen.EnvelopeDAHDSR;
import com.jsyn.unitgen.Circuit;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.SineOscillatorPhaseModulated;
import com.jsyn.unitgen.RedNoise;
import com.softsynth.shared.time.TimeStamp;

public class Voz1 extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    EnvelopeDAHDSR mDAHDSR;
    SawtoothOscillator mSawOsc;
    SineOscillatorPhaseModulated mSineOscPM;
    SquareOscillator mSquareOsc;
    RedNoise mRedNoise;
    SineOscillator mSineOsc;
    EnvelopeDAHDSR mDAHDSR2;
    EnvelopeDAHDSR mDAHDSR3;
    EnvelopeDAHDSR mDAHDSR4;
    SineOscillator mSineOsc2;
    SineOscillator mSineOsc3;
    SineOscillator mSineOsc4;
    FilterLowPass mLowPass;
    SineOscillator mSineOsc5;

    // Declare inner classes for any child circuits.

    public Voz1() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mDAHDSR = new EnvelopeDAHDSR());
        add(mSawOsc = new SawtoothOscillator());
        add(mSineOscPM = new SineOscillatorPhaseModulated());
        add(mSquareOsc = new SquareOscillator());
        add(mRedNoise = new RedNoise());
        add(mSineOsc = new SineOscillator());
        add(mDAHDSR2 = new EnvelopeDAHDSR());
        add(mDAHDSR3 = new EnvelopeDAHDSR());
        add(mDAHDSR4 = new EnvelopeDAHDSR());
        add(mSineOsc2 = new SineOscillator());
        add(mSineOsc3 = new SineOscillator());
        add(mSineOsc4 = new SineOscillator());
        add(mLowPass = new FilterLowPass());
        add(mSineOsc5 = new SineOscillator());
        
        mSineOsc.frequency.setMinimum(0);
        mSineOsc.frequency.setMaximum(40);
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mSawOsc.frequency);
        mFrequencyPassThrough.output.connect(mSquareOsc.frequency);
        mFrequencyPassThrough.output.connect(mRedNoise.frequency);
        mFrequencyPassThrough.output.connect(mSineOscPM.frequency);
        mDAHDSR.output.connect(mLowPass.input);
        mSawOsc.output.connect(mDAHDSR2.amplitude);
        mSineOscPM.output.connect(mDAHDSR.amplitude);
        mSquareOsc.output.connect(mDAHDSR3.amplitude);
        mRedNoise.output.connect(mDAHDSR4.amplitude);
        mSineOsc.output.connect(mSineOscPM.amplitude);
        mDAHDSR2.output.connect(mLowPass.input);
        mDAHDSR3.output.connect(mLowPass.input);
        mDAHDSR4.output.connect(mLowPass.input);
        mSineOsc2.output.connect(mSawOsc.amplitude);
        mSineOsc3.output.connect(mSquareOsc.amplitude);
        mSineOsc4.output.connect(mRedNoise.amplitude);
        mLowPass.output.connect(mOutputPassThrough.input);
        mSineOsc5.output.connect(mSineOscPM.modulation);
        // Setup
        frequency.setup(40.0, 1318.5102276514797, 8000.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mDAHDSR.input.set(0.0);
        mDAHDSR.delay.set(0.0);
        mDAHDSR.attack.set(5.425448091462846);
        mDAHDSR.hold.set(0.0);
        mDAHDSR.decay.set(0.46833755131311117);
        mDAHDSR.sustain.set(0.5);
        mDAHDSR.release.set(6.089146172448036);
        mSineOsc.frequency.set(0.0);
        mSineOsc.amplitude.set(1.0);
        mDAHDSR2.input.set(0.0);
        mDAHDSR2.delay.set(0.0);
        mDAHDSR2.attack.set(0.04335570686530277);
        mDAHDSR2.hold.set(0.0);
        mDAHDSR2.decay.set(0.2);
        mDAHDSR2.sustain.set(0.5);
        mDAHDSR2.release.set(0.3);
        mDAHDSR3.input.set(0.0);
        mDAHDSR3.delay.set(0.0);
        mDAHDSR3.attack.set(0.1);
        mDAHDSR3.hold.set(0.0);
        mDAHDSR3.decay.set(0.2);
        mDAHDSR3.sustain.set(0.5);
        mDAHDSR3.release.set(0.3);
        mDAHDSR4.input.set(0.0);
        mDAHDSR4.delay.set(0.0);
        mDAHDSR4.attack.set(0.1);
        mDAHDSR4.hold.set(0.0);
        mDAHDSR4.decay.set(0.2);
        mDAHDSR4.sustain.set(0.5);
        mDAHDSR4.release.set(0.3);
        mSineOsc2.frequency.set(0.0);
        mSineOsc2.amplitude.set(0.0);
        mSineOsc3.frequency.set(0.0);
        mSineOsc3.amplitude.set(0.0);
        mSineOsc4.frequency.set(0.0);
        mSineOsc4.amplitude.set(0.0);
        mLowPass.frequency.set(2053.3153266358936);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(7.054920279999999);
        mSineOsc5.frequency.set(0.0);
        mSineOsc5.amplitude.set(1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mDAHDSR.input.on(timeStamp);
        mDAHDSR2.input.on(timeStamp);
        mDAHDSR3.input.on(timeStamp);
        mDAHDSR4.input.on(timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mDAHDSR.input.off(timeStamp);
        mDAHDSR2.input.off(timeStamp);
        mDAHDSR3.input.off(timeStamp);
        mDAHDSR4.input.off(timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
